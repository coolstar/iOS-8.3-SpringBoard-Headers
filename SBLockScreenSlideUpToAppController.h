/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "SBPresentingDelegate.h"
#import "SBCoordinatedPresenting.h"
#import "SBUIPasscodeLockViewDelegate.h"
#import "SpringBoard-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSString, NSURL, SBLockScreenView, SBBounceSettings, UIView, SBDisableAppStatusBarAlphaChangesAssertion, UIImage, SBPasscodeLockDisableAssertion, NSMutableArray, NSSet, BBObserver, LSBestAppSuggestion, SBLockScreenBounceAnimator, SBUIPasscodeViewWithLockScreenStyle, SBApplication, _UIDynamicValueAnimation;
@protocol SBLockScreenSlideUpToAppControllerDelegate;

__attribute__((visibility("hidden")))
@interface SBLockScreenSlideUpToAppController : XXUnknownSuperclass <SBPresentingDelegate, SBUIPasscodeLockViewDelegate, SBCoordinatedPresenting> {
	BOOL _isInScreenOffMode;
	UIView* _slidingStatusBarView;
	SBLockScreenView* _lockScreenView;
	BOOL _currentlySliding;
	SBLockScreenBounceAnimator* _bounceAnimator;
	_UIDynamicValueAnimation* _dynamicAnimation;
	id<SBPresentingDelegate> _presentingDelegate;
	SBBounceSettings* _bounceSettings;
	SBApplication* _targetApp;
	LSBestAppSuggestion* _targetAppInfo;
	BOOL _targetAppIsSiri;
	BOOL _targetAppIsInCallService;
	BOOL _deactivatingForInCallService;
	NSURL* _targetURL;
	UIImage* _grabberImage;
	BBObserver* _bulletinObserver;
	BOOL _attemptingUnlock;
	BOOL _showingPasscodeView;
	BOOL _dismissingPasscodeView;
	BOOL _defaultImagesNeedUpdateUponPasscodeExit;
	NSMutableArray* _deferredAppUpdateBlocks;
	BOOL _executingDeferredAppUpdateBlocks;
	BOOL _waitingToDeactivateForActivityLaunch;
	id _preUIUnlockActions;
	SBPasscodeLockDisableAssertion* _passcodeDisableAssertionForContinuityUnlock;
	UIView* _clippingView;
	UIView* _appPortraitDefaultImageView;
	UIView* _appLandscapeDefaultImageView;
	UIView* _appBackgroundView;
	SBUIPasscodeViewWithLockScreenStyle* _passcodeView;
	UIView* _passcodeOverscrollView;
	UIView* _appContextHostView;
	BOOL _disableGracePeriodForCamera;
	SBPasscodeLockDisableAssertion* _disableGracePeriodForCameraAssertion;
	BOOL _disablingOcclusionsForTargetApp;
	BOOL _launchingAppFromNonOccludedState;
	id<SBLockScreenSlideUpToAppControllerDelegate> _delegate;
	BOOL _didAbortBounce;
	SBDisableAppStatusBarAlphaChangesAssertion* _disableStatusBarAssertion;
	float _boundaryTranslationInY;
}
@property(readonly, assign, nonatomic) NSSet* tapExcludedViews;
@property(readonly, assign, nonatomic) NSSet* conflictingGestures;
@property(readonly, assign, nonatomic) NSSet* gestures;
@property(assign, nonatomic) id<SBPresentingDelegate> presentingDelegate;
@property(readonly, assign, nonatomic) unsigned hintEdge;
@property(readonly, assign, nonatomic) float hintDisplacement;
@property(readonly, assign, nonatomic) int coordinatedPresentingControllerIdentifier;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float boundaryTranslationInY;
@property(assign, nonatomic) BOOL didAbortBounce;
@property(retain, nonatomic) SBDisableAppStatusBarAlphaChangesAssertion* disableStatusBarAssertion;
@property(assign, nonatomic) id<SBLockScreenSlideUpToAppControllerDelegate> delegate;
-(id)bounceAnimator;
-(id)_newDynamicAnimationForTargetValue:(double)targetValue withInitialVelocity:(double)initialVelocity;
-(id)_newBounceAnimatorWithGrabberView:(id)grabberView;
-(void)passcodeLockViewPasscodeEnteredViaMesa:(id)mesa;
-(void)passcodeLockViewCancelButtonPressed:(id)pressed;
-(void)passcodeLockViewPasscodeEntered:(id)entered;
-(void)passcodeLockViewPasscodeDidChange:(id)passcodeLockViewPasscode;
-(void)presentingControllerDidFinishPresentation:(id)presentingController;
-(void)presentingController:(id)controller willHandleGesture:(id)gesture;
-(BOOL)presentingController:(id)controller gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)presentingController:(id)controller gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)treatCurrentPositionAsBoundaryforGesture:(id)gesture;
-(void)reenableGestureRecognizer:(id)recognizer;
-(void)cancelGestureRecognizer:(id)recognizer;
-(void)abortAnimatedTransition;
-(void)endTransitionWithVelocity:(CGPoint)velocity wasCancelled:(BOOL)cancelled completion:(id)completion;
-(float)_foregroundTranslationForLocation:(CGPoint)location;
-(void)updateTransitionWithTouchLocation:(CGPoint)touchLocation velocity:(CGPoint)velocity;
-(void)beginPresentationWithTouchLocation:(CGPoint)touchLocation;
-(BOOL)isPresentingControllerTransitioning;
-(void)setDisableGracePeriodForCamera:(BOOL)camera;
-(void)_deviceBlockedStateChanged:(id)changed;
-(BOOL)isShowingPasscodeView;
-(BOOL)hasActiveUnlockActionContext;
-(BOOL)wantsToShowStatusBar;
-(void)_reloadAppDefaultImages;
-(void)_clearAppDefaultImagesAndRemoveFromSuperview:(BOOL)superview;
-(void)_passcodeLockStateChanged;
-(void)_addOrRemovePasscodeViewIfNecessary;
-(void)setTargetURL:(id)url;
-(void)setTargetApp:(id)app withLSInfo:(id)lsinfo;
-(void)presentTargetAppAnimated:(BOOL)animated;
-(void)activateTargetApp;
-(void)_activateApp:(id)app withAppInfo:(id)appInfo andURL:(id)url animated:(BOOL)animated;
-(void)hideSlidingStatusBar;
-(void)abortDynamicAnimationForScreenOff;
-(void)_executeDeferredAppUpdateBlocks;
-(void)_commonGestureCleanup;
-(void)finalizeGesture;
-(void)_animateSlideUpWithVelocity:(CGPoint)velocity completion:(id)completion;
-(void)_animateSlideDownWithVelocity:(CGPoint)velocity completion:(id)completion;
-(void)_finishSlideDownWithCompletion:(id)completion;
-(void)translateSlidingViewByY:(float)y;
-(void)performGeneralCleanupForUserAction:(BOOL)userAction;
-(void)_cleanupFromDismissal;
-(void)_cleanupBackgroundLaunchAndContextHostingNonsense;
-(void)_handleAppLaunchedUnderLockScreenWithResult:(int)result;
-(void)prepareForSlideUpAnimation;
-(id)_lockScreenViewFakeStatusBar;
-(void)deactivate;
-(void)activate;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)setInScreenOffMode:(BOOL)screenOffMode;
-(void)setGrabberViewImage:(id)image;
-(void)setGrabberOnLockScreen:(id)screen;
-(id)_newGrabberView;
-(void)_setupBounceAnimatorAndGrabberView;
-(void)setLockScreenView:(id)view force:(BOOL)force;
-(id)lockScreenView;
-(void)dealloc;
-(id)init;
@end

