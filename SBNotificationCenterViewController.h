/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "SBNotificationCenterWidgetHost.h"
#import "SBReachabilityObserver.h"
#import "SBBulletinActionHandler.h"
#import "UIGestureRecognizerDelegate.h"
#import "SBBulletinViewControllerDelegate.h"
#import "SBUISizeObservingViewDelegate.h"
#import "SpringBoard-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSString, _UIBackdropView, UIGestureRecognizer, UIView, SBNotificationSeparatorView, NSSet, SBBulletinObserverViewController, SBModeViewController, SBChevronView, UIStatusBar;
@protocol SBWidgetViewControllerDelegate, SBNotificationCenterViewControllerDelegate;

__attribute__((visibility("hidden")))
@interface SBNotificationCenterViewController : XXUnknownSuperclass <SBBulletinViewControllerDelegate, SBUISizeObservingViewDelegate, UIGestureRecognizerDelegate, SBNotificationCenterWidgetHost, SBBulletinActionHandler, SBReachabilityObserver> {
	id<SBNotificationCenterViewControllerDelegate> _delegate;
	UIView* _clippingView;
	UIView* _containerView;
	UIView* _contentView;
	UIView* _backgroundView;
	UIView* _modeClippingView;
	SBNotificationSeparatorView* _bottomSeparator;
	SBModeViewController* _modeController;
	SBBulletinObserverViewController* _todayViewController;
	SBBulletinObserverViewController* _allModeViewController;
	UIStatusBar* _statusBar;
	SBChevronView* _grabberView;
	UIView* _grabberContentView;
	UIView* _grabberBackgroundView;
	SBChevronView* _registeredGrabberView;
	CGRect _grabberContentViewFrameForRegisteredGrabber;
	id _registeredGrabberHideBlock;
	struct {
		unsigned blursBackground : 1;
		unsigned showsBackground : 1;
		unsigned isBackgroundValid : 1;
		unsigned isGrabberEnabled : 1;
		unsigned isGrabberLockEngaged : 1;
		unsigned viewHitTestsAsOpaque : 1;
		unsigned isViewHitTestingValid : 1;
	} _notificationCenterViewControllerFlags;
	BOOL _showingForReachability;
	CGPoint _preReachabilityOrigin;
	CGPoint _reachabilityOrigin;
	BOOL _preReachabilityGrabberHidden;
	CGRect _preReachabilityGrabberFrame;
	CGPoint _preReachabilitySeparatorOrigin;
	CGPoint _reachabilitySeparatorOrigin;
	UIGestureRecognizer* _tapToCancelReachabilityGestureRecognizer;
}
@property(assign, nonatomic) id<SBWidgetViewControllerDelegate> widgetDelegate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSSet* visibleContentViewControllers;
@property(readonly, assign, nonatomic) NSSet* widgetHandlingViewControllers;
@property(readonly, assign, nonatomic) UIEdgeInsets todayContentEdgeInsets;
@property(readonly, assign, nonatomic) CGSize todayContentMaxSize;
@property(readonly, assign, nonatomic) int layoutMode;
@property(readonly, assign, nonatomic) SBChevronView* grabberView;
@property(readonly, retain, nonatomic) _UIBackdropView* backdropView;
@property(assign, nonatomic) BOOL blursBackground;
@property(assign, nonatomic) BOOL showsBackground;
@property(assign, nonatomic, getter=isGrabberViewEnabled) BOOL grabberViewEnabled;
@property(readonly, assign, nonatomic) CGRect contentFrame;
@property(assign, nonatomic) UIEdgeInsets clippingInsets;
@property(assign, nonatomic) float contentViewAlpha;
@property(assign, nonatomic, getter=isSuppressingNotificationUpdates) BOOL suppressesNotificationUpdates;
@property(assign, nonatomic) id<SBNotificationCenterViewControllerDelegate> delegate;
+(id)_localizableTitleForBulletinViewControllerOfClass:(Class)aClass;
+(id)grayControlInteractionTintColor;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)handleCancelReachabilityGesture:(id)gesture;
-(void)handleReachabilityModeDeactivated;
-(void)handleReachabilityModeActivated;
-(void)_animateForReachabilityDeactivatedWithHandler:(id)handler;
-(void)_animateForReachabilityActivatedWithHandler:(id)handler;
-(void)_performReachabilityTransactionForActivate:(BOOL)activate immediately:(BOOL)immediately;
-(void)runScrollTest:(id)test iterations:(int)iterations delta:(int)delta useAAGView:(BOOL)view;
-(BOOL)handleAction:(id)action forBulletin:(id)bulletin withCompletion:(id)completion;
-(void)hostDidDismiss;
-(void)hostWillDismiss;
-(void)hostDidPresent;
-(void)hostWillPresent;
-(CGRect)grabberContentRect;
-(void)updateForChangeInMessagePrivacy;
-(void)_setContainerFrame:(CGRect)frame;
-(CGRect)_containerFrame;
-(CGRect)_containerFrame:(BOOL)frame;
-(void)dismissGrabberView;
-(void)presentGrabberView;
-(CGRect)_grabberContentViewFrameForDefaultGrabberPresentation;
-(CGRect)_grabberContentViewFrameForRegisteredGrabber;
-(void)abortAnimatedPositionChange;
-(CGRect)positionContentForTouchAtLocation:(CGPoint)location;
-(void)_setViewHitTestAsOpaque:(BOOL)opaque;
-(void)_reloadAllWidgets;
-(id)colorForElement:(int)element;
-(id)_relevanceDateColor;
-(id)_grabberColor;
-(void)disableGrabberLock;
-(BOOL)isGrabberLocked;
-(void)_configureGrabberForSoloMode:(BOOL)soloMode;
-(id)unregisterSharedGrabberView;
-(void)registerSharedGrabberView:(id)view withHideBlock:(id)hideBlock;
-(void)_registerGrabberView:(id)view withHideBlock:(id)hideBlock;
-(CGRect)revealRectForBulletin:(id)bulletin;
-(void)prepareLayoutForPresentationFromBanner;
-(BOOL)shouldAutomaticallyForwardAppearanceMethods;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadInitialViewState;
-(void)viewWillLayoutSubviews;
-(void)sizeObservingView:(id)view didChangeSize:(CGSize)size;
-(void)viewDidLoad;
-(void)loadView;
-(void)_loadModeControllerView;
-(void)_loadModeClippingView;
-(void)_loadBottomSeparator;
-(void)_loadGrabberContentView;
-(id)_newGrabberView;
-(void)_updateContrastSettingsForBottomSeparator;
-(void)_updateContrastSettingsForGrabberView;
-(void)_loadStatusBar;
-(void)_loadContentView;
-(void)_loadContainerView;
-(void)_loadClippingView;
-(void)_configureView;
-(void)_validateBackgroundViewIfNecessary;
-(id)_newBackgroundView;
-(void)_loadContentViewControllersForCurrentState;
-(id)_allModeViewControllerCreateIfNecessary:(BOOL)necessary;
-(id)_todayViewControllerCreateIfNecessary:(BOOL)necessary;
-(id)_newBulletinObserverViewControllerOfClass:(Class)aClass;
-(void)_backgroundContrastDidChange:(id)_backgroundContrast;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

