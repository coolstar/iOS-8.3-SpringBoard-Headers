/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "SBUIBiometricEventObserver.h"
#import "SBControlCenterObserver.h"
#import "SBPresentingDelegate.h"
#import "UIGestureRecognizerDelegate.h"
#import "SpringBoard-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSString, SBLockScreenView, NSDate, NSMutableSet, SBLockScreenHintTapGestureRecognizer, SBLockScreenHintPanGestureRecognizer, SBLockScreenHintLongPressGestureRecognizer, NSMapTable;
@protocol SBCoordinatedPresenting;

__attribute__((visibility("hidden")))
@interface SBLockScreenHintManager : XXUnknownSuperclass <UIGestureRecognizerDelegate, SBPresentingDelegate, SBControlCenterObserver, SBUIBiometricEventObserver> {
	BOOL _gestureHandlingEnabled;
	BOOL _guestGestureActive;
	BOOL _didEvaluatePressDelay;
	BOOL _fingerOnMesa;
	SBLockScreenView* _lockScreenView;
	SBLockScreenHintTapGestureRecognizer* _tapGesture;
	SBLockScreenHintLongPressGestureRecognizer* _longPressGesture;
	SBLockScreenHintPanGestureRecognizer* _panGesture;
	NSMutableSet* _gestures;
	NSMapTable* _controllersToGuestGestures;
	NSMapTable* _controllersToConflictingGuestGestures;
	int _gestureState;
	id<SBCoordinatedPresenting> _activeController;
	unsigned _activeHintEdge;
	NSDate* _initialTouchTimeStamp;
	CGPoint _initialPanLocationInViewSpace;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic, getter=isFingerOnMesa) BOOL fingerOnMesa;
@property(assign, nonatomic) BOOL didEvaluatePressDelay;
@property(assign, nonatomic, getter=isGuestGestureActive) BOOL guestGestureActive;
@property(retain, nonatomic) NSDate* initialTouchTimeStamp;
@property(assign, nonatomic) unsigned activeHintEdge;
@property(retain, nonatomic) id<SBCoordinatedPresenting> activeController;
@property(assign, nonatomic) int gestureState;
@property(retain, nonatomic) NSMapTable* controllersToConflictingGuestGestures;
@property(retain, nonatomic) NSMapTable* controllersToGuestGestures;
@property(retain, nonatomic) NSMutableSet* gestures;
@property(assign, nonatomic) CGPoint initialPanLocationInViewSpace;
@property(retain, nonatomic) SBLockScreenHintPanGestureRecognizer* panGesture;
@property(retain, nonatomic) SBLockScreenHintLongPressGestureRecognizer* longPressGesture;
@property(retain, nonatomic) SBLockScreenHintTapGestureRecognizer* tapGesture;
@property(assign, nonatomic, getter=isGestureHandlingEnabled) BOOL gestureHandlingEnabled;
@property(retain, nonatomic) SBLockScreenView* lockScreenView;
-(void)_noteBioMatchingEnabledDidChange:(id)_noteBioMatchingEnabled;
-(void)biometricEventMonitor:(id)monitor handleBiometricEvent:(unsigned)event;
-(void)controlCenterDidFinishTransition;
-(void)controlCenterWillBeginTransition;
-(void)controlCenterDidDismiss;
-(void)controlCenterWillPresent;
-(void)notificationCenterDidDismiss:(id)notificationCenter;
-(void)presentingController:(id)controller conflictingGestureDidEnd:(id)conflictingGesture;
-(void)presentingController:(id)controller conflictingGestureDidBegin:(id)conflictingGesture;
-(void)presentingControllerDidFinishPresentation:(id)presentingController;
-(void)presentingController:(id)controller willHandleGesture:(id)gesture;
-(void)_presentingController:(id)controller willHandlePan:(id)pan;
-(void)_presentingController:(id)controller willHandleTap:(id)tap;
-(BOOL)presentingController:(id)controller gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)presentingController:(id)controller gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)_handlePan:(id)pan;
-(void)_updateGrabberStateForControllerIfNecessary:(id)controllerIfNecessary;
-(void)_endControllerPresentationForPanInState:(int)state;
-(void)_updateControllerPresentationForPan;
-(void)_beginControllerPresentationForPan;
-(void)_tapPeriodElapsed;
-(void)_resetGesture:(id)gesture forController:(id)controller;
-(void)_handlePress:(id)press;
-(void)_dismissControllerForPress:(BOOL)press;
-(void)_updateControllerPresentationForPress:(BOOL)press;
-(void)_handleTap:(id)tap;
-(id)_tapGestureForActiveController;
-(void)_resetGesture:(id)gesture;
-(BOOL)_hasTapPeriodElapsed;
-(void)_updateControllerPresentationForTap;
-(double)_elapsedTapPeriod;
-(void)_updateControllerPresentationForTapOrPress:(id)tapOrPress withAnimation:(id)animation abortingCurrentAnimation:(BOOL)animation3;
-(void)_abortCurrentAnimationForController:(id)controller;
-(BOOL)_hintGestureShouldBegin:(id)_hintGesture;
-(int)_compareControllerWithIdentifier:(int)identifier withControllerWithIdentifier:(int)identifier2;
-(BOOL)_isPresentationEnabledForController:(id)controller locationInWindow:(CGPoint)window;
-(BOOL)_isBounceEnabledForController:(id)controller locationInWindow:(CGPoint)window;
-(BOOL)_isController:(id)controller excludingViewsUnderGesture:(id)gesture;
-(void)_cancelGuestGesturesExcludingController:(id)controller;
-(void)_initializeInitialTouchTimeStamp;
-(void)_resetGestureSequenceAndReenableGestures;
-(void)_reenableGestures;
-(void)_resetGestureSequence;
-(void)_resetInitialPanLocation;
-(id)_controllerForGesture:(id)gesture;
-(BOOL)_canControllerWithIdentifier:(int)identifier becomeActiveWithTouchAtLocation:(CGPoint)location;
-(id)_coordinatedPresentingControllerWithIdentifier:(int)identifier;
-(id)_lockScreenNotificationListView;
-(id)_lockScreenNotificationListController;
-(id)_lockScreenBottomLeftController;
-(id)_lockScreenCameraController;
-(id)_lockScreenViewController;
-(CGRect)_bottomGrabberZone;
-(CGRect)_bottomLeftGrabberZone;
-(CGRect)_cameraGrabberZone;
-(CGRect)_topGrabberZone;
-(id)_viewForGestures;
-(void)_setLocalGesture:(id)gesture enabled:(BOOL)enabled;
-(BOOL)_doesController:(id)controller manageGestureLikeGesture:(id)gesture;
-(id)_controller:(id)controller managedGestureLikeGesture:(id)gesture;
-(void)removeCoordinatedPresentingController:(id)controller;
-(void)addCoordinatedPresentingController:(id)controller;
-(BOOL)_hasCoordinatedPresentingController:(id)controller;
-(void)_removeAllGestures;
-(void)_installLocalGestures;
-(void)dealloc;
-(id)init;
@end

