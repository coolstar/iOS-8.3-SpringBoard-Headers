/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "SBWidgetViewController.h"
#import "SpringBoard-Structs.h"

@class NSTimer, NSDate, UIView, NSObject, _SBBrokenWidgetView, NSMapTable, _SBWidgetRemoteViewController;
@protocol NSCopying, OS_dispatch_semaphore, OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface _SBWidgetViewControllerOutOfProcess : SBWidgetViewController {
	BOOL _snapshottingEnabled;
	BOOL _requestingRemoteViewController;
	BOOL _disconnectingRemoteViewController;
	BOOL _encodingLayerTree;
	BOOL _didRequestViewInset;
	BOOL _didUpdate;
	BOOL _blacklisted;
	NSObject<OS_dispatch_queue>* _proxyConnectionQueue;
	NSObject<OS_dispatch_queue>* _proxyDisconnectionQueue;
	NSObject<OS_dispatch_queue>* _proxyRequestQueue;
	NSObject<OS_dispatch_queue>* _diskWriteQueue;
	_SBWidgetRemoteViewController* _remoteViewController;
	id<NSCopying> _extensionRequest;
	UIView* _contentProvidingView;
	UIView* _snapshotView;
	NSTimer* _disconnectionTimer;
	NSObject<OS_dispatch_semaphore>* _viewWillAppearSemaphore;
	NSObject<OS_dispatch_semaphore>* _viewWillDisappearSemaphore;
	id _remoteViewControllerDisconnectionHandler;
	NSDate* _lastUnanticipatedDisconnectionDate;
	NSMapTable* _openAppearanceTransactions;
	_SBBrokenWidgetView* _brokenView;
}
@property(retain, nonatomic, getter=_brokenView, setter=_setBrokenView:) _SBBrokenWidgetView* brokenView;
@property(assign, nonatomic, getter=_isBlacklisted, setter=_setBlacklisted:) BOOL blacklisted;
@property(assign, nonatomic, setter=_setImplementsPerformUpdate:) BOOL implementsPerformUpdate;
@property(assign, nonatomic, getter=_didUpdate, setter=_setDidUpdate:) BOOL didUpdate;
@property(readonly, assign, nonatomic, getter=_openAppearanceTransactions) NSMapTable* openAppearanceTransactions;
@property(retain, nonatomic, getter=_lastUnanticipatedDisconnectionDate, setter=_setLastUnanticipatedDisconnectionDate:) NSDate* lastUnanticipatedDisconnectionDate;
@property(copy, nonatomic, getter=_remoteViewControllerDisconnectionHandler, setter=_setRemoteViewControllerDisconnectionHandler:) id remoteViewControllerDisconnectionHandler;
@property(retain, nonatomic, getter=_viewWillDisappearSemaphore, setter=_setViewWillDisappearSemaphore:) NSObject<OS_dispatch_semaphore>* viewWillDisappearSemaphore;
@property(retain, nonatomic, getter=_viewWillAppearSemaphore, setter=_setViewWillAppearSemaphore:) NSObject<OS_dispatch_semaphore>* viewWillAppearSemaphore;
@property(assign, nonatomic, getter=_disconnectionTimer, setter=_setDisconnectionTimer:) NSTimer* disconnectionTimer;
@property(assign, nonatomic, getter=_didRequestViewInset, setter=_setDidRequestViewInset:) BOOL didRequestViewInset;
@property(assign, nonatomic, getter=_isEncodingLayerTree, setter=_setEncodingLayerTree:) BOOL encodingLayerTree;
@property(assign, nonatomic, getter=_isDisconnectingRemoteViewController, setter=_setDisconnectingRemoteViewController:) BOOL disconnectingRemoteViewController;
@property(assign, nonatomic, getter=_isRequestingRemoteViewController, setter=_setRequestingRemoteViewController:) BOOL requestingRemoteViewController;
@property(assign, nonatomic, getter=_isSnapshottingEnabled, setter=_setSnapshottingEnabled:) BOOL snapshottingEnabled;
@property(retain, nonatomic, getter=_snapshotView, setter=_setSnapshotView:) UIView* snapshotView;
@property(retain, nonatomic, getter=_contentProvidingView, setter=_setContentProvidingView:) UIView* contentProvidingView;
@property(copy, nonatomic, getter=_extensionRequest, setter=_setExtensionRequest:) id<NSCopying> extensionRequest;
@property(retain, nonatomic, getter=_remoteViewController, setter=_setRemoteViewController:) _SBWidgetRemoteViewController* remoteViewController;
@property(readonly, assign, nonatomic, getter=_diskWriteQueue) NSObject<OS_dispatch_queue>* diskWriteQueue;
@property(readonly, assign, nonatomic, getter=_proxyRequestQueue) NSObject<OS_dispatch_queue>* proxyRequestQueue;
@property(readonly, assign, nonatomic, getter=_proxyDisconnectionQueue) NSObject<OS_dispatch_queue>* proxyDisconnectionQueue;
@property(readonly, assign, nonatomic, getter=_proxyConnectionQueue) NSObject<OS_dispatch_queue>* proxyConnectionQueue;
+(void)initialize;
-(id)description;
-(id)_cancelTouches;
-(BOOL)_effectiveHasContent;
-(id)_valueForCachedStateKey:(id)cachedStateKey;
-(void)_synchronizeCachedState;
-(id)_cachedStateURLEnsuringDirectoryExists:(BOOL)exists;
-(void)widgetDidTerminateWithError:(id)widget;
-(void)_disconnectRemoteViewControllerAndCoalesce:(BOOL)coalesce completionHandler:(id)handler;
-(void)_invalidateDisconnectionTimer;
-(void)_disconnectionTimerDidFire:(id)_disconnectionTimer;
-(void)_disconnectRemoteViewController:(id)controller;
-(void)_finishDisconnectingRemoteViewControllerWithError:(id)error completion:(id)completion;
-(void)handleReconnectionRequest:(id)request;
-(BOOL)_attemptReconnectionAfterUnanticipatedDisconnection;
-(BOOL)_canDisconnectRemoteViewController:(id*)controller;
-(void)_requestRemoteViewController:(id)controller;
-(BOOL)_canRequestRemoteViewController:(id*)controller;
-(void)_handleRequestedViewHeight:(float)height usingAutolayout:(BOOL)autolayout requestIdentifier:(id)identifier;
-(float)_updatePreferredContentSizeWithHeight:(float)height;
-(float)_contentWidth;
-(UIEdgeInsets)_marginInsets;
-(CGSize)_todayContentMaxSize;
-(void)_insertAppropriateViewWithContent;
-(BOOL)_isRemoteViewVisible;
-(void)_insertRemoteViewAfterViewWillAppearWithCompletion:(id)_insertRemoteViewAfterView;
-(BOOL)_canInsertRemoteView;
-(void)_insertContentProvidingSubview:(id)subview completion:(id)completion;
-(void)_endRequestState:(int)state;
-(void)setRequestState:(int)state;
-(void)_loadSnapshotViewFromDiskIfNecessary:(id)diskIfNecessary;
-(void)_packageViewFromURL:(id)url reply:(id)reply;
-(void)_packageViewWithData:(id)data reply:(id)reply;
-(void)_packageViewWithBlock:(id)block reply:(id)reply;
-(void)_captureLayerTree:(id)tree;
-(void)_invalidateSnapshotWithForce:(BOOL)force completionHandler:(id)handler;
-(void)_setSnapshotView:(id)view forLayoutMode:(int)layoutMode;
-(void)_removeAllSnapshots;
-(void)_writeSnapshotData:(id)data toURLForLayoutMode:(int)layoutMode;
-(void)_removeSnapshotAtURL:(id)url;
-(id)_widgetSnapshotURLForLayoutMode:(int)layoutMode ensuringDirectoryExists:(BOOL)exists;
-(id)_snapshotIdentifierForLayoutMode:(int)layoutMode;
-(void)_enqueueRemoteServiceRequest:(id)request withDescription:(id)description;
-(void)_enqueueRequest:(id)request inQueue:(id)queue trampolinedToMainQueue:(BOOL)mainQueue withDescription:(id)description;
-(id)_request:(id)request withDescription:(id)description forQueue:(id)queue trampolinedToMainQueue:(BOOL)mainQueue;
-(void)_setupRequestQueue;
-(id)auditToken;
-(void)performUpdateWithCompletionHandler:(id)completionHandler;
-(void)setHasContent:(BOOL)content;
-(void)insertSnapshotWithCompletionHandler:(id)completionHandler;
-(void)requestInsertionOfRemoteViewWithCompletionHandler:(id)completionHandler;
-(void)invalidateCachedSnapshotWithCompletionHandler:(id)completionHandler;
-(void)validateSnapshotViewForActiveLayoutMode;
-(void)captureSnapshotWithCompletionHandler:(id)completionHandler;
-(void)_disconnectRemoteViewControllerImmediatelyWithCompletionHandler:(id)completionHandler;
-(void)disconnectRemoteViewControllerWithCompletionHandler:(id)completionHandler;
-(void)connectRemoteViewControllerWithCompletionHandler:(id)completionHandler;
-(BOOL)shouldAutomaticallyForwardAppearanceMethods;
-(void)viewDidLoad;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)_endRemoteViewControllerAppearanceTransitionIfNecessary;
-(void)_beginRemoteViewControllerAppearanceTransitionIfNecessary:(BOOL)necessary animated:(BOOL)animated completion:(id)completion;
-(void)_setSemaphoreInstanceVariable:(id*)variable toSemaphore:(id)semaphore;
-(void)dealloc;
-(id)initWithWidgetIdentifier:(id)widgetIdentifier bundlePath:(id)path;
@end

